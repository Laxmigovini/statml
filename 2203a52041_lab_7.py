# -*- coding: utf-8 -*-
"""2203A52041 LAB-7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19bNMSJeFKXYO_JKNkEoGm4ViGPDm7UT5
"""

import pandas as pd
a=pd.read_csv('/content/drive/MyDrive/Japan_life_expectancy (2).csv')
a.head()

c=a.drop(columns=['Prefecture'],axis=1)
print(c)

#normalize data
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
scaler.fit(c)
nd = scaler.transform(c)
#print(nd)
c.loc[:, :]=nd
c.head()

b=a['Life_expectancy']
print(b)

x=a.drop(columns=['Life_expectancy','Prefecture'],axis=1)
print('features:\n',x)

import math
X=a
print("enter the splitting of ration train and test: ")
s_f = float(input())
n_train = math.floor(s_f *X.shape[0])
n_test = math.ceil((1-s_f) * X.shape[0])
X_train = x[:n_train]
Y_train = y[:n_train]
X_test = x[n_train:]
Y_test = y[n_train:]
print("Total Number of rows in train:",X_train.shape[0])
print("Total Number of rows in test:",Y_test.shape[0])

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error


# Create a linear regression model
model= LinearRegression()

# Fit the model to the data
model.fit(X_train,Y_train)

# Make predictions on the training data
y_pred = model.predict(X_train)

# Calculate the mean squared error
mse = mean_squared_error(Y_train, y_pred)

print("Mean squared error:", mse)

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error


# Create a linear regression model
model= LinearRegression()

# Fit the model to the data
model.fit(X_test,Y_test)

# Make predictions on the training data
y_pred = model.predict(X_test)

# Calculate the mean squared error
mse = mean_squared_error(Y_test, y_pred)

print("Mean squared error:", mse)

import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split


# Create a Ridge regression model
ridge_reg= Ridge(alpha=0.1)

# Fit the model to the training data
ridge_reg.fit(X_train, Y_train)

# Make predictions on the testing data
y_pred = ridge_reg.predict(X_train)

# Calculate the mean squared error
mse = mean_squared_error(Y_train, y_pred)

print("Mean squared error:", mse)

import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

# Create a Lasso regression model
lasso_reg= Lasso(alpha=0.1)

# Fit the model to the training data
lasso_reg.fit(X_train, Y_train)

# Make predictions on the testing data
y_pred = model.predict(X_test)

# Calculate the mean squared error
mse = mean_squared_error(Y_test, y_pred)

print("Mean squared error:",mse)

import pandas as pd
from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

# Create a Lasso regression model
lasso_reg= Lasso(alpha=0.1)

# Fit the model to the training data
lasso_reg.fit(X_test, Y_test)

# Make predictions on the testing data
y_pred = model.predict(X_train)

# Calculate the mean squared error
mse = mean_squared_error(Y_train, y_pred)

print("Mean squared error:",mse)